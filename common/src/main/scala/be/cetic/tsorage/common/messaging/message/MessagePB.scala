// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package be.cetic.tsorage.common.messaging.message

@SerialVersionUID(0L)
final case class MessagePB(
    metric: _root_.scala.Predef.String = "",
    tagset: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String] = _root_.scala.collection.immutable.Map.empty,
    `type`: _root_.scala.Predef.String = "",
    values: _root_.scala.Seq[be.cetic.tsorage.common.messaging.message.MessagePB.Value] = _root_.scala.Seq.empty
    ) extends scalapb.GeneratedMessage with scalapb.Message[MessagePB] with scalapb.lenses.Updatable[MessagePB] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = metric
        if (__value != "") {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      tagset.foreach { __item =>
        val __value = be.cetic.tsorage.common.messaging.message.MessagePB._typemapper_tagset.toBase(__item)
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      
      {
        val __value = `type`
        if (__value != "") {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
        }
      };
      values.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = metric
        if (__v != "") {
          _output__.writeString(1, __v)
        }
      };
      tagset.foreach { __v =>
        val __m = be.cetic.tsorage.common.messaging.message.MessagePB._typemapper_tagset.toBase(__v)
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = `type`
        if (__v != "") {
          _output__.writeString(3, __v)
        }
      };
      values.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): be.cetic.tsorage.common.messaging.message.MessagePB = {
      var __metric = this.metric
      val __tagset = (_root_.scala.collection.immutable.Map.newBuilder[_root_.scala.Predef.String, _root_.scala.Predef.String] ++= this.tagset)
      var __type = this.`type`
      val __values = (_root_.scala.collection.immutable.Vector.newBuilder[be.cetic.tsorage.common.messaging.message.MessagePB.Value] ++= this.values)
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __metric = _input__.readString()
          case 18 =>
            __tagset += be.cetic.tsorage.common.messaging.message.MessagePB._typemapper_tagset.toCustom(_root_.scalapb.LiteParser.readMessage(_input__, be.cetic.tsorage.common.messaging.message.MessagePB.TagsetEntry.defaultInstance))
          case 26 =>
            __type = _input__.readString()
          case 34 =>
            __values += _root_.scalapb.LiteParser.readMessage(_input__, be.cetic.tsorage.common.messaging.message.MessagePB.Value.defaultInstance)
          case tag => _input__.skipField(tag)
        }
      }
      be.cetic.tsorage.common.messaging.message.MessagePB(
          metric = __metric,
          tagset = __tagset.result(),
          `type` = __type,
          values = __values.result()
      )
    }
    def withMetric(__v: _root_.scala.Predef.String): MessagePB = copy(metric = __v)
    def clearTagset = copy(tagset = _root_.scala.collection.immutable.Map.empty)
    def addTagset(__vs: (_root_.scala.Predef.String, _root_.scala.Predef.String)*): MessagePB = addAllTagset(__vs)
    def addAllTagset(__vs: Iterable[(_root_.scala.Predef.String, _root_.scala.Predef.String)]): MessagePB = copy(tagset = tagset ++ __vs)
    def withTagset(__v: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String]): MessagePB = copy(tagset = __v)
    def withType(__v: _root_.scala.Predef.String): MessagePB = copy(`type` = __v)
    def clearValues = copy(values = _root_.scala.Seq.empty)
    def addValues(__vs: be.cetic.tsorage.common.messaging.message.MessagePB.Value*): MessagePB = addAllValues(__vs)
    def addAllValues(__vs: Iterable[be.cetic.tsorage.common.messaging.message.MessagePB.Value]): MessagePB = copy(values = values ++ __vs)
    def withValues(__v: _root_.scala.Seq[be.cetic.tsorage.common.messaging.message.MessagePB.Value]): MessagePB = copy(values = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = metric
          if (__t != "") __t else null
        }
        case 2 => tagset.iterator.map(be.cetic.tsorage.common.messaging.message.MessagePB._typemapper_tagset.toBase).toSeq
        case 3 => {
          val __t = `type`
          if (__t != "") __t else null
        }
        case 4 => values
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(metric)
        case 2 => _root_.scalapb.descriptors.PRepeated(tagset.iterator.map(be.cetic.tsorage.common.messaging.message.MessagePB._typemapper_tagset.toBase(_).toPMessage).toVector)
        case 3 => _root_.scalapb.descriptors.PString(`type`)
        case 4 => _root_.scalapb.descriptors.PRepeated(values.iterator.map(_.toPMessage).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = be.cetic.tsorage.common.messaging.message.MessagePB
}

object MessagePB extends scalapb.GeneratedMessageCompanion[be.cetic.tsorage.common.messaging.message.MessagePB] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[be.cetic.tsorage.common.messaging.message.MessagePB] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): be.cetic.tsorage.common.messaging.message.MessagePB = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    be.cetic.tsorage.common.messaging.message.MessagePB(
      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(1), Nil).asInstanceOf[_root_.scala.Seq[be.cetic.tsorage.common.messaging.message.MessagePB.TagsetEntry]].iterator.map(be.cetic.tsorage.common.messaging.message.MessagePB._typemapper_tagset.toCustom).toMap,
      __fieldsMap.getOrElse(__fields.get(2), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(3), Nil).asInstanceOf[_root_.scala.Seq[be.cetic.tsorage.common.messaging.message.MessagePB.Value]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[be.cetic.tsorage.common.messaging.message.MessagePB] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      be.cetic.tsorage.common.messaging.message.MessagePB(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[be.cetic.tsorage.common.messaging.message.MessagePB.TagsetEntry]]).getOrElse(_root_.scala.Seq.empty).iterator.map(be.cetic.tsorage.common.messaging.message.MessagePB._typemapper_tagset.toCustom).toMap,
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Seq[be.cetic.tsorage.common.messaging.message.MessagePB.Value]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = MessageProto.javaDescriptor.getMessageTypes.get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = MessageProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 2 => __out = be.cetic.tsorage.common.messaging.message.MessagePB.TagsetEntry
      case 4 => __out = be.cetic.tsorage.common.messaging.message.MessagePB.Value
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      _root_.be.cetic.tsorage.common.messaging.message.MessagePB.Value,
      _root_.be.cetic.tsorage.common.messaging.message.MessagePB.TagsetEntry
    )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = be.cetic.tsorage.common.messaging.message.MessagePB(
    metric = "",
    tagset = _root_.scala.collection.immutable.Map.empty,
    `type` = "",
    values = _root_.scala.Seq.empty
  )
  @SerialVersionUID(0L)
  final case class Value(
      datetime: _root_.scala.Option[com.google.protobuf.timestamp.Timestamp] = _root_.scala.None,
      payload: _root_.com.google.protobuf.ByteString = _root_.com.google.protobuf.ByteString.EMPTY
      ) extends scalapb.GeneratedMessage with scalapb.Message[Value] with scalapb.lenses.Updatable[Value] {
      @transient
      private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      private[this] def __computeSerializedValue(): _root_.scala.Int = {
        var __size = 0
        if (datetime.isDefined) {
          val __value = datetime.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        
        {
          val __value = payload
          if (__value != _root_.com.google.protobuf.ByteString.EMPTY) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(2, __value)
          }
        };
        __size
      }
      final override def serializedSize: _root_.scala.Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        datetime.foreach { __v =>
          val __m = __v
          _output__.writeTag(1, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        {
          val __v = payload
          if (__v != _root_.com.google.protobuf.ByteString.EMPTY) {
            _output__.writeBytes(2, __v)
          }
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): be.cetic.tsorage.common.messaging.message.MessagePB.Value = {
        var __datetime = this.datetime
        var __payload = this.payload
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __datetime = Option(_root_.scalapb.LiteParser.readMessage(_input__, __datetime.getOrElse(com.google.protobuf.timestamp.Timestamp.defaultInstance)))
            case 18 =>
              __payload = _input__.readBytes()
            case tag => _input__.skipField(tag)
          }
        }
        be.cetic.tsorage.common.messaging.message.MessagePB.Value(
            datetime = __datetime,
            payload = __payload
        )
      }
      def getDatetime: com.google.protobuf.timestamp.Timestamp = datetime.getOrElse(com.google.protobuf.timestamp.Timestamp.defaultInstance)
      def clearDatetime: Value = copy(datetime = _root_.scala.None)
      def withDatetime(__v: com.google.protobuf.timestamp.Timestamp): Value = copy(datetime = Option(__v))
      def withPayload(__v: _root_.com.google.protobuf.ByteString): Value = copy(payload = __v)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => datetime.orNull
          case 2 => {
            val __t = payload
            if (__t != _root_.com.google.protobuf.ByteString.EMPTY) __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => datetime.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 2 => _root_.scalapb.descriptors.PByteString(payload)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion = be.cetic.tsorage.common.messaging.message.MessagePB.Value
  }
  
  object Value extends scalapb.GeneratedMessageCompanion[be.cetic.tsorage.common.messaging.message.MessagePB.Value] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[be.cetic.tsorage.common.messaging.message.MessagePB.Value] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): be.cetic.tsorage.common.messaging.message.MessagePB.Value = {
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      be.cetic.tsorage.common.messaging.message.MessagePB.Value(
        __fieldsMap.get(__fields.get(0)).asInstanceOf[_root_.scala.Option[com.google.protobuf.timestamp.Timestamp]],
        __fieldsMap.getOrElse(__fields.get(1), _root_.com.google.protobuf.ByteString.EMPTY).asInstanceOf[_root_.com.google.protobuf.ByteString]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[be.cetic.tsorage.common.messaging.message.MessagePB.Value] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        be.cetic.tsorage.common.messaging.message.MessagePB.Value(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[com.google.protobuf.timestamp.Timestamp]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.com.google.protobuf.ByteString]).getOrElse(_root_.com.google.protobuf.ByteString.EMPTY)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = be.cetic.tsorage.common.messaging.message.MessagePB.javaDescriptor.getNestedTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = be.cetic.tsorage.common.messaging.message.MessagePB.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      (__number: @_root_.scala.unchecked) match {
        case 1 => __out = com.google.protobuf.timestamp.Timestamp
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = be.cetic.tsorage.common.messaging.message.MessagePB.Value(
      datetime = _root_.scala.None,
      payload = _root_.com.google.protobuf.ByteString.EMPTY
    )
    implicit class ValueLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, be.cetic.tsorage.common.messaging.message.MessagePB.Value]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, be.cetic.tsorage.common.messaging.message.MessagePB.Value](_l) {
      def datetime: _root_.scalapb.lenses.Lens[UpperPB, com.google.protobuf.timestamp.Timestamp] = field(_.getDatetime)((c_, f_) => c_.copy(datetime = Option(f_)))
      def optionalDatetime: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.google.protobuf.timestamp.Timestamp]] = field(_.datetime)((c_, f_) => c_.copy(datetime = f_))
      def payload: _root_.scalapb.lenses.Lens[UpperPB, _root_.com.google.protobuf.ByteString] = field(_.payload)((c_, f_) => c_.copy(payload = f_))
    }
    final val DATETIME_FIELD_NUMBER = 1
    final val PAYLOAD_FIELD_NUMBER = 2
    def of(
      datetime: _root_.scala.Option[com.google.protobuf.timestamp.Timestamp],
      payload: _root_.com.google.protobuf.ByteString
    ): _root_.be.cetic.tsorage.common.messaging.message.MessagePB.Value = _root_.be.cetic.tsorage.common.messaging.message.MessagePB.Value(
      datetime,
      payload
    )
  }
  
  @SerialVersionUID(0L)
  final case class TagsetEntry(
      key: _root_.scala.Predef.String = "",
      value: _root_.scala.Predef.String = ""
      ) extends scalapb.GeneratedMessage with scalapb.Message[TagsetEntry] with scalapb.lenses.Updatable[TagsetEntry] {
      @transient
      private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      private[this] def __computeSerializedValue(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = key
          if (__value != "") {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
          }
        };
        
        {
          val __value = value
          if (__value != "") {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
          }
        };
        __size
      }
      final override def serializedSize: _root_.scala.Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = key
          if (__v != "") {
            _output__.writeString(1, __v)
          }
        };
        {
          val __v = value
          if (__v != "") {
            _output__.writeString(2, __v)
          }
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): be.cetic.tsorage.common.messaging.message.MessagePB.TagsetEntry = {
        var __key = this.key
        var __value = this.value
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __key = _input__.readString()
            case 18 =>
              __value = _input__.readString()
            case tag => _input__.skipField(tag)
          }
        }
        be.cetic.tsorage.common.messaging.message.MessagePB.TagsetEntry(
            key = __key,
            value = __value
        )
      }
      def withKey(__v: _root_.scala.Predef.String): TagsetEntry = copy(key = __v)
      def withValue(__v: _root_.scala.Predef.String): TagsetEntry = copy(value = __v)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = key
            if (__t != "") __t else null
          }
          case 2 => {
            val __t = value
            if (__t != "") __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(key)
          case 2 => _root_.scalapb.descriptors.PString(value)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion = be.cetic.tsorage.common.messaging.message.MessagePB.TagsetEntry
  }
  
  object TagsetEntry extends scalapb.GeneratedMessageCompanion[be.cetic.tsorage.common.messaging.message.MessagePB.TagsetEntry] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[be.cetic.tsorage.common.messaging.message.MessagePB.TagsetEntry] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): be.cetic.tsorage.common.messaging.message.MessagePB.TagsetEntry = {
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      be.cetic.tsorage.common.messaging.message.MessagePB.TagsetEntry(
        __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[_root_.scala.Predef.String],
        __fieldsMap.getOrElse(__fields.get(1), "").asInstanceOf[_root_.scala.Predef.String]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[be.cetic.tsorage.common.messaging.message.MessagePB.TagsetEntry] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        be.cetic.tsorage.common.messaging.message.MessagePB.TagsetEntry(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = be.cetic.tsorage.common.messaging.message.MessagePB.javaDescriptor.getNestedTypes.get(1)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = be.cetic.tsorage.common.messaging.message.MessagePB.scalaDescriptor.nestedMessages(1)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = be.cetic.tsorage.common.messaging.message.MessagePB.TagsetEntry(
      key = "",
      value = ""
    )
    implicit class TagsetEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, be.cetic.tsorage.common.messaging.message.MessagePB.TagsetEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, be.cetic.tsorage.common.messaging.message.MessagePB.TagsetEntry](_l) {
      def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.key)((c_, f_) => c_.copy(key = f_))
      def value: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val KEY_FIELD_NUMBER = 1
    final val VALUE_FIELD_NUMBER = 2
    implicit val keyValueMapper: _root_.scalapb.TypeMapper[be.cetic.tsorage.common.messaging.message.MessagePB.TagsetEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)] =
      _root_.scalapb.TypeMapper[be.cetic.tsorage.common.messaging.message.MessagePB.TagsetEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)](__m => (__m.key, __m.value))(__p => be.cetic.tsorage.common.messaging.message.MessagePB.TagsetEntry(__p._1, __p._2))
    def of(
      key: _root_.scala.Predef.String,
      value: _root_.scala.Predef.String
    ): _root_.be.cetic.tsorage.common.messaging.message.MessagePB.TagsetEntry = _root_.be.cetic.tsorage.common.messaging.message.MessagePB.TagsetEntry(
      key,
      value
    )
  }
  
  implicit class MessagePBLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, be.cetic.tsorage.common.messaging.message.MessagePB]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, be.cetic.tsorage.common.messaging.message.MessagePB](_l) {
    def metric: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.metric)((c_, f_) => c_.copy(metric = f_))
    def tagset: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String]] = field(_.tagset)((c_, f_) => c_.copy(tagset = f_))
    def `type`: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.`type`)((c_, f_) => c_.copy(`type` = f_))
    def values: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[be.cetic.tsorage.common.messaging.message.MessagePB.Value]] = field(_.values)((c_, f_) => c_.copy(values = f_))
  }
  final val METRIC_FIELD_NUMBER = 1
  final val TAGSET_FIELD_NUMBER = 2
  final val TYPE_FIELD_NUMBER = 3
  final val VALUES_FIELD_NUMBER = 4
  @transient
  private val _typemapper_tagset: _root_.scalapb.TypeMapper[be.cetic.tsorage.common.messaging.message.MessagePB.TagsetEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)] = implicitly[_root_.scalapb.TypeMapper[be.cetic.tsorage.common.messaging.message.MessagePB.TagsetEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)]]
  def of(
    metric: _root_.scala.Predef.String,
    tagset: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String],
    `type`: _root_.scala.Predef.String,
    values: _root_.scala.Seq[be.cetic.tsorage.common.messaging.message.MessagePB.Value]
  ): _root_.be.cetic.tsorage.common.messaging.message.MessagePB = _root_.be.cetic.tsorage.common.messaging.message.MessagePB(
    metric,
    tagset,
    `type`,
    values
  )
}
