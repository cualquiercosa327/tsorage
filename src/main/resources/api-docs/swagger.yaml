openapi: "3.0.2"
info:
  title: "Swagger TSorage µservice"
  description: "This is the TSorage µservice Hub.  You can find out more about Tsorage Hub
    at
    [https://github.com/cetic/tsorage-hub](https://github.com/cetic/tsorage-hub)."
  version: "1.0.2"
  termsOfService: ""
  contact:
    email: "mathieu.goeminne@cetic.be"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
servers:
  - url: "{protocol}://localhost:{port}/"
    description: "Internal staging server for testing (uses test data)" # TODO
    variables:
      protocol:
        enum:
          - "http"
          - "https"
        default: "https"
      port:
        enum:
          - "8081"
        default: "8081"

tags:
  - name: "access"
    description: "User management and authentication"
    externalDocs:
      description: "Find out more"
      url: "http://swagger.io"
  - name: "grafana"
    description: "Grafana service involving SimpleJson"
    externalDocs:
      description: "Find out more"
      url: "https://grafana.com/grafana/plugins/grafana-simple-json-datasource"
  
paths:
  /:
    get:
      summary: "Test the connection with the server"
      description: "Tests the connection with the server. If the server is on, `code 200` is returned."
      operationId: "connectionTest"
      responses:
        "200":
          description: "The server is on."
          content:
            text/plain:
              schema:
                type: "string"
                example: "OK"
        "5XX":
          description: "Unexpected error."
  
  /auth:
    post:
      summary: "User authentication"
      description: "Authenticates a user based on a provided token."
      operationId: "checkAuth"
      tags:
        - access
      requestBody:
        description: "The token payload supposedly associated with a user."
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Token"
      responses:
        "200":
          description: "Successful operation."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationResponse"
        "405":
          description: "Invalid input."
        "5XX":
          description: "Unexpected error."
      security:
        - petstore_auth:
            - write:pets
            - read:pets

  /metric/{metricId}/tagset:
    get:
      summary: "Lists the static tagset associated with a metric"
      description: "Lists the static tagset associated with a metric."
      operationId: "getMetricTagset"
      tags:
        - metric
      parameters:
        - in: "path"
          name: "metricId"
          description: "The id of the considered metric."
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "A tagset."
          content:
            application/json:
              schema:
                type: "object"
                example:
                  owner: "cetic"
                  quality: "good"
                  plant: "plant1"
                  asset: "pump3"
        "400":
          description: "Bad request. Metric ID must be a string."
        "401":
          description: "Authorization information is missing or invalid."
        "404":
          description: "A metric with the specified ID was not found."
        "405":
          description: "Invalid input."
        "5XX":
          description: "Unexpected error."
  
  /v1/api/grafana:
    get:
      summary: "Test the connection with the server for Grafana"
      description: "Allows Grafana to test the connection with the server. If the server is on, `code 200` is returned."
      operationId: "grafanaConnectionTest"
      tags:
        - grafana
      responses:
        "200":
          description: "The server is on."
          content:
            text/plain:
              schema:
                type: "string"
                example: "OK"
        "5XX":
          description: "Unexpected error."

  /v1/api/grafana/search:
    get:
      summary: "Get the metric names"
      description: "Retrieves the name of all metrics." # TODO
      operationId: "getMetricNames"
      tags:
        - grafana
      responses:
        "200":
          description: "Name of all metrics." # TODO
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchResponse"
        "5XX":
          description: "Unexpected error."

    post:
      summary: "Get the metric names"
      description: "Retrieves the name of all metrics." # TODO
      operationId: "getMetricNamesPost"
      tags:
        - grafana
      requestBody:
        description: "Search request." # TODO
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchRequest"
      responses:
        "200":
          description: "Name of all metrics." # TODO
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchResponse"
        "400":
          description: "Bad request."
        "5XX":
          description: "Unexpected error."

  /v1/api/grafana/query:
    post:
      summary: "Query the database"
      description: "Makes a query on the database depending on some parameters. It is used to retrieve data points within a given time range for given metrics." # TODO
      operationId: "queryDatabase"
      tags:
        - grafana
      requestBody:
        description: "Query request." # TODO
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QueryRequest"
      responses:
        "200":
          description: "Data retrieved from the database according to the query." # TODO
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryResponse"
        "400":
          description: "Bad request."
        "404":
          description: "One or more metrics with the specified names was not found in the database."
        "405":
          description: "Invalid input."
        "5XX":
          description: "Unexpected error."
  
  /swagger:
    get:
      summary: "Get the API's documentation"
      description: "Retrieves the documentation of the API." # TODO
      operationId: "swagger"
      responses:
        "200":
          description: "Documentation of the API." # TODO
          content:
            text/plain:
              schema:
                type: "string"
        "5XX":
          description: "Unexpected error."

components:
  securitySchemes:
    petstore_auth: # TODO
      type: "oauth2"
      flows:
        implicit:
          authorizationUrl: "https://petstore.swagger.io/oauth/authorize"
          scopes:
            write:pets: "Modify pets in your account."
            read:pets: "Read your pets."

    api_key:
      type: "apiKey"
      name: "api_key"
      in: "header"
  
  schemas:
    Token:
      type: "object"
      properties:
        api_key:
          type: "string"
          example: "4b8639ed-0e90-4b3f-8a45-e87c22d17887"

    AuthenticationResponse:
      type: "object"
      properties:
        id:
          type: "string"
        name:
          type: "string"
          example: "Mathieu Goeminne"
        expiracy:
          type: "string"
          format: "date-time"
          example: "2019-01-02T12:34:56.789"
    
    User:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        username:
          type: "string"
        firstName:
          type: "string"
        lastName:
          type: "string"
        email:
          type: "string"
        password:
          type: "string"
        phone:
          type: "string"
        userStatus:
          type: "integer"
          format: "int32"
          description: "User Status."
      xml:
        name: "User"

    SearchRequest:
      description: "Search request." # TODO
      type: "object"
      properties:
        target:
          $ref: "#/components/schemas/Target"
    
    SearchResponse:
      description: "Search response." # TODO
      type: "array"
      items:
        $ref: "#/components/schemas/Target"
      example: ["metric1", "metric2", "metric3", "metric4"]

    QueryRequest:
      description: "Query request." # TODO
      type: "object"
      properties:
        range:
          $ref: "#/components/schemas/TimeRange"

        targets:
          description: "Array of metric names."
          type: "array"
          items:
            type: "object"
            properties:
              target:
                $ref: "#/components/schemas/Target"
          example:
            - target: "metric1"
            - target: "metric2"
            - target: "metric3"

        intervalMs:
          description: "Desired time interval between data points (in milliseconds). The server will attempt to make data points are `intervalMs` milliseconds apart."
          type: "integer"
          format: "int64"
          minimum: 1
          example: 60000

        maxDataPoints:
          description: "Maximum number of data points to return."
          type: "integer"
          format: "int32"
          minimum: 1
          example: 1000

      required:
        - "range"
        - "targets"

    QueryResponse:
      description: "Query response." # TODO
      type: "array"
      items:
        description: "Retrieved data points for a single metric."
        type: "object"
        properties:
          target:
            $ref: "#/components/schemas/Target"

          datapoints:
            $ref: "#/components/schemas/DataPoints"

        required:
          - "target"
          - "datapoints"
      
      example:
        - target: "metric1"
          datapoints: [[20.528, 1569029400000], [21.414, 1569029460000], [23.918, 1569029520000]]
        - target: "metric2"
          datapoints: [[0.19, 1569029400000], [-4.83, 1569029460000], [-11.73, 1569029520000]]

    Target:
      description: "Metric name."
      type: "string"
      example: "metric1"

    TimeRange:
      description: "Time range in ISO 8601 format (`from` a start time `to` an end time)."
      type: "object"
      properties:
        from:
          description: "Start time (in ISO 8601 format)."
          type: "string"
          format: "date-time"
          example: "2019-09-20T16:00:00.000Z"
        to:
          description: "End time (in ISO 8601 format)."
          type: "string"
          format: "date-time"
          example: "2019-09-21T07:30:00.000Z"
      required:
        - "from"
        - "to"

    DataPoints:
      description: "Data points with corresponding Unix timestamp isn milliseconds."
      type: "array"
      items:
        description: "Single data with corresponding Unix timestamp in milliseconds."
        type: "array"
        minItems: 2
        maxItems: 2
        items:
          description: "Array of two numbers. The first one is a value and the second one is the corresponding Unix timestamp in milliseconds."
          anyOf:
            - type: "number"
              format: "double"
            - type: "integer"
              format: "int64"
        example: [20.528, 1569029400000]
      example:
        - [20.528, 1569029400000]
        - [21.414, 1569029460000]
        - [23.918, 1569029520000]

externalDocs:
  description: "Find out more about TSorage"
  url: "https://github.com/cetic/tsorage-hub"
