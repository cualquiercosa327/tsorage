openapi: "3.0.2"
info:
  title: "TSorage API"
  description: "This API allows you to queried the **TSorage**'s database." # TODO
  version: "1.0-alpha"
  termsOfService: "" # TODO
  contact:
    email: "tsorage@cetic.be" # TODO
  license:
    name: "MIT"
    url: "http://opensource.org/licenses/MIT"

servers:
  - url: "{protocol}://localhost:{port}/" # TODO
    description: "Internal staging server for testing (uses test data)." # TODO
    variables:
      protocol:
        enum:
          - "http"
        default: "http"
      port:
        enum:
          - "8080"
        default: "8080"
  
paths:
  /:
    get:
      summary: "Test the connection with the server."
      description: "Tests the connection with the server. If the server is on, `code 200` is returned."

      responses:
        "200":
          description: "The server is on."
          content:
            text/plain:
              schema:
                type: "string"
                example: "OK"

  /search:
    get:
      summary: "Get the sensor names."
      description: "Retrieves the name of all sensors." # TODO
      
      responses:
        "200":
          description: "Name of all sensors." # TODO
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchResponse"

    post:
      summary: "Get the sensor names."
      description: "Retrieves the name of all sensors." # TODO
      
      requestBody:
        description: "Search request." # TODO
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchRequest"

      responses:
        "200":
          description: "Name of all sensors." # TODO
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchResponse"

  /query:
    post:
      summary: "Query the database."
      description: "Makes a query on the database depending on some parameters. It is used to retrieve data points within a given time range for given sensors." # TODO
      
      requestBody:
        description: "Query request." # TODO
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QueryRequest"

      responses:
        "200":
          description: "Data retrieved from the database according to the query." # TODO
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryResponse"
  
  /api-docs:
    get:
      summary: "Get the API's documentation."
      description: "" # TODO
      
      responses:
        "200":
          description: "Documentation of the API" # TODO
          content:
            text/plain:
              schema:
                type: "string"

components:
  schemas:
    SearchRequest:
      description: "Search request." # TODO
      type: "object"
      properties:
        target:
          $ref: "#/components/schemas/Target"
    
    SearchResponse:
      description: "Search response." # TODO
      type: "array"
      items:
        $ref: "#/components/schemas/Target"
      example: ["sensor1", "sensor2", "sensor3", "sensor4"]

    QueryRequest:
      description: "Query request." # TODO
      type: "object"
      properties:
        range:
          $ref: "#/components/schemas/TimeRange"

        targets:
          description: "Array of sensor names."
          type: "array"
          items:
            type: "object"
            properties:
              target:
                $ref: "#/components/schemas/Target"
          example:
            - target: "sensor1"
            - target: "sensor2"
            - target: "sensor3"

        intervalMs:
          description: "Desired time interval between data points (in milliseconds). The server will attempt to make data points are `intervalMs` milliseconds apart."
          type: "integer"
          format: "int64"
          minimum: 1
          example: 60000

        maxDataPoints:
          description: "Maximum number of data points to return."
          type: "integer"
          format: "int32"
          minimum: 1
          example: 1000

      required:
        - "range"
        - "targets"

    QueryResponse:
      description: "Query response." # TODO
      type: "array"
      items:
        description: "Retrieved data points for a single sensor."
        type: "object"
        properties:
          target:
            $ref: "#/components/schemas/Target"

          datapoints:
            $ref: "#/components/schemas/DataPoints"

        required:
          - "target"
          - "datapoints"
      
      example:
        - target: "sensor1"
          datapoints: [[20.528, 1569029400000], [21.414, 1569029460000], [23.918, 1569029520000]]
        - target: "sensor2"
          datapoints: [[0.19, 1569029400000], [-4.83, 1569029460000], [-11.73, 1569029520000]]

    Target:
      description: "Sensor name."
      type: "string"
      example: "sensor1"

    TimeRange:
      description: "Time range in ISO 8601 format (`from` a start time `to` an end time)."
      type: "object"
      properties:
        from:
          description: "Start time (in ISO 8601 format)."
          type: "string"
          format: "date-time"
          example: "2019-09-20T16:00:00.000Z"
        to:
          description: "End time (in ISO 8601 format)."
          type: "string"
          format: "date-time"
          example: "2019-09-21T07:30:00.000Z"
      required:
        - "from"
        - "to"

    DataPoints:
      description: "Data points with corresponding Unix timestamp isn milliseconds."
      type: "array"
      items:
        description: "Single data with corresponding Unix timestamp in milliseconds."
        type: "array"
        minItems: 2
        maxItems: 2
        items:
          description: "Array of two numbers. The first one is a value and the second one is the corresponding Unix timestamp in milliseconds."
          anyOf:
            - type: "number"
              format: "double"
            - type: "integer"
              format: "int64"
        example: [20.528, 1569029400000]
      example:
        - [20.528, 1569029400000]
        - [21.414, 1569029460000]
        - [23.918, 1569029520000]
